{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/Variable-roles-types-and-code-skimming/Variable-roles-types-and-code-skimming/",
    "result": {"data":{"site":{"siteMetadata":{"title":"James Santucci's development blog"}},"markdownRemark":{"id":"54071118-b669-530a-a861-51cbd56162fe","excerpt":"I’ve been reading The Programmer’s Brain, since I want to be better at explaining / teaching\nunfamiliar programming concepts to people who might want me to go…","html":"<p>I’ve been reading <a href=\"https://www.manning.com/books/the-programmers-brain\"><em>The Programmer’s Brain</em></a>, since I want to be better at explaining / teaching\nunfamiliar programming concepts to people who might want me to go away so they can get some\nreal work done. As someone who learned to program mostly on my own (not to program <em>well</em>, but to\nprogram), I was curious whether I’d recognize any of the cognitive patterns, since it’s still\npretty easy for me to remember when it was hard to open files in Python. I haven’t been disappointed\nand the exercises have already re-shaped how I think about digging into unfamiliar code. I just\nfinished chapter 5 a few days ago.</p>\n<p>One of many concepts that was new to me was <a href=\"https://www.tandfonline.com/doi/full/10.1080/08993400500056563\"><em>roles of variables</em></a>. “Roles” describe what variables are <em>for</em>(unlike simple types, which describe what variables are).\nHere are some of the roles listed in <em>The Programmer’s Brain</em>:</p>\n<ul>\n<li>most-recent holder: holds the most recent value you’ve seen, e.g., while stepping through a list by index, you would put the most recent value you’ve seen in one of these.</li>\n<li>most-wanted holder: holds the “best” value, whatever “best” means for you</li>\n<li>gatherer: “a variable that collects data and aggregates it into one value”</li>\n<li>container: “any data structure that holds multiple elements”</li>\n</ul>\n<p>I’ve picked these four out in particular because of an example Felienne Hermans gives at the end of the section introducing roles:</p>\n<blockquote>\n<p>a program with a stepper and a most-wanted holder value is a search program</p>\n</blockquote>\n<h3>Mapping roles to FP concepts</h3>\n<p>Felienne Hermans mentions annotating roles of variables on printed code using some specific symbols, translated loosely into emojis here:</p>\n<ul>\n<li>most-recent holder: 📆</li>\n<li>most-wanted holder: 💎</li>\n<li>gatherer: 🧺</li>\n<li>container: 🔳</li>\n</ul>\n<p>This makes sense — if you can pictorially represent the type of program you have, you can\ndramatically reduce the amount of code someone has to read to get the big picture. One of my favorite PureScript\nprojects, <a href=\"https://pursuit.purescript.org/packages/purescript-prelewd/0.1.0\"><code class=\"language-text\">prelewd</code></a>, plays a similar game, asking:</p>\n<blockquote>\n<p>Is <code class=\"language-text\">f &lt;$> a &lt;*> b</code> scarier than <code class=\"language-text\">f 🚂(a)🚋(b)🚋(c)</code>? If so, why?</p>\n</blockquote>\n<p>Let’s write some tiny search functions in PureScript with these emoji annotations!</p>\n<h3>A search program in PureScript</h3>\n<p>PureScript is a statically typed pure functional programming language with a Haskell-y syntax.</p>\n<p>For our search program, we’re going to find the tallest building from a list of buildings. We’re also not going\nto use <a href=\"https://pursuit.purescript.org/packages/purescript-foldable-traversable/5.0.1/docs/Data.Semigroup.Foldable#v:maximumBy\"><code class=\"language-text\">maximumBy</code></a>, because that’s boring.</p>\n<p>Here’s out list of buildings:</p>\n<div class=\"gatsby-highlight\" data-language=\"purescript\"><pre class=\"language-purescript\"><code class=\"language-purescript\"><span class=\"token hvariable\">buildings</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Sears Tower\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"height\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Burj Khalifa\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"height\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1200</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Small building\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"height\"</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Medium building\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"height\"</span><span class=\"token operator\">:</span> <span class=\"token number\">50</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Non-notably tall buidling\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"height\"</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Unreasonably tall building\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"height\"</span><span class=\"token operator\">:</span> <span class=\"token number\">10000</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>To find the tallest building, we’ll use the <a href=\"https://pursuit.purescript.org/packages/purescript-foldable-traversable/5.0.1/docs/Data.Foldable#v:foldl\"><code class=\"language-text\">foldl</code></a> function. The <code class=\"language-text\">foldl</code> function’s type signature looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"purescript\"><pre class=\"language-purescript\"><code class=\"language-purescript\"><span class=\"token keyword\">forall</span> <span class=\"token hvariable\">f</span> <span class=\"token hvariable\">a</span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">.</span> <span class=\"token constant\">Foldable</span> <span class=\"token hvariable\">f</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">b</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">b</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">f</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">b</span></code></pre></div>\n<p>With roles of variables, we could annotate it as:</p>\n<div class=\"gatsby-highlight\" data-language=\"purescript\"><pre class=\"language-purescript\"><code class=\"language-purescript\"><span class=\"token comment\">--                  🔳   =>      🧺      ->  💎/📆 -> 🔳 -> 💎</span>\n<span class=\"token keyword\">forall</span> <span class=\"token hvariable\">f</span> <span class=\"token hvariable\">a</span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">.</span> <span class=\"token constant\">Foldable</span> <span class=\"token hvariable\">f</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">b</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span>   <span class=\"token hvariable\">b</span>    <span class=\"token operator\">-></span> <span class=\"token hvariable\">f</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">b</span></code></pre></div>\n<p>Or: it’s a function from some stuff in a container, with a gathering function, that eventually finds a most wanted value.</p>\n<p>Let’s actually find the tallest building now:</p>\n<div class=\"gatsby-highlight\" data-language=\"purescript\"><pre class=\"language-purescript\"><code class=\"language-purescript\"><span class=\"token keyword\">type</span> <span class=\"token constant\">Building</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token hvariable\">name</span><span class=\"token operator\">:</span> <span class=\"token constant\">String</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">height</span><span class=\"token operator\">:</span> <span class=\"token constant\">Int</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token hvariable\">compareBuilding</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Building</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Building</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Building</span>\n<span class=\"token hvariable\">compareBuilding</span> <span class=\"token hvariable\">b1</span> <span class=\"token hvariable\">b2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">b1</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">height</span> <span class=\"token operator\">></span> <span class=\"token hvariable\">b2</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">height</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span> <span class=\"token hvariable\">b1</span> <span class=\"token keyword\">else</span> <span class=\"token hvariable\">b2</span>\n\n<span class=\"token comment\">--                    💎</span>\n<span class=\"token hvariable\">tallestBuilding</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Building</span>\n<span class=\"token hvariable\">tallestBuilding</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">foldl</span>\n  <span class=\"token hvariable\">compareBuilding</span> <span class=\"token comment\">-- 🧺</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token hvariable\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"impossible building\"</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">-- 💎/📆</span>\n  <span class=\"token hvariable\">buildings</span> <span class=\"token comment\">-- 🔳</span></code></pre></div>\n<p>The only weird part here is the 💎/📆 value — since we’re traversing the whole list, and comparing with the best value we know\nat each point, our initial value starts as the “most recent best” value. Starting with a bogus value for our most recent best building guarantees that we can\nfind a tallest building even in empty lists.</p>\n<h4>Type hints for variables roles</h4>\n<p>The function above finds exactly one value, but we can vary the type of our most recent best container to get different sorts of functions.\nMaybe  instead of the tallest building, we want to find the first building with a specific name. We can also write this search with <code class=\"language-text\">foldl</code>, but\nthe gathering function and initial most recent best value will be different:</p>\n<div class=\"gatsby-highlight\" data-language=\"purescript\"><pre class=\"language-purescript\"><code class=\"language-purescript\"><span class=\"token hvariable\">isItMedium</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Maybe</span> <span class=\"token constant\">Building</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Building</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Maybe</span> <span class=\"token constant\">Building</span>\n<span class=\"token hvariable\">isItMedium</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Just</span> <span class=\"token hvariable\">building</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">_</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Just</span> <span class=\"token hvariable\">building</span>\n<span class=\"token hvariable\">isItMedium</span> <span class=\"token hvariable\">_</span> <span class=\"token hvariable\">building</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">building</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">name</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Medium building\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span> <span class=\"token constant\">Just</span> <span class=\"token hvariable\">building</span> <span class=\"token keyword\">else</span> <span class=\"token constant\">Nothing</span>\n\n<span class=\"token comment\">--                 🔳      💎</span>\n<span class=\"token hvariable\">mediumBuilding</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Maybe</span> <span class=\"token constant\">Building</span>\n<span class=\"token hvariable\">mediumBuilding</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">foldl</span>\n  <span class=\"token hvariable\">isItMedium</span> <span class=\"token comment\">-- 🧺</span>\n  <span class=\"token constant\">Nothing</span> <span class=\"token comment\">-- 🔳💎</span>\n  <span class=\"token hvariable\">buildings</span> <span class=\"token comment\">-- 🔳</span></code></pre></div>\n<p>In this case, we’re searching for something in the list that might not be there. As a result, our most wanted value\nstarts out with an empty container, in this case, an empty <a href=\"https://pursuit.purescript.org/packages/purescript-maybe/5.0.0/docs/Data.Maybe#t:Maybe\"><code class=\"language-text\">Maybe</code></a> value. <code class=\"language-text\">Maybes</code> can hold <em>zero or one</em> values.\nOnce <code class=\"language-text\">isItMedium</code> finds a building that matches, it puts that building into the <code class=\"language-text\">Maybe</code> container with the <code class=\"language-text\">Just</code>\nconstructor. Functions such as this one, where we model the possibility of not finding what we’re looking for are also searches.</p>\n<p>Finally, let’s assume the buildings are sorted by year of construction. We could search for buildings that were the tallest\nbuilding in the world when they were constructed:</p>\n<div class=\"gatsby-highlight\" data-language=\"purescript\"><pre class=\"language-purescript\"><code class=\"language-purescript\"><span class=\"token hvariable\">tallestBuildings</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Array</span> <span class=\"token constant\">Building</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Building</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Array</span> <span class=\"token constant\">Building</span>\n<span class=\"token hvariable\">tallestBuildings</span> <span class=\"token hvariable\">buildings</span> <span class=\"token hvariable\">building</span> <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">case</span> <span class=\"token hvariable\">last</span> <span class=\"token hvariable\">buildings</span> <span class=\"token keyword\">of</span>\n    <span class=\"token constant\">Just</span> <span class=\"token hvariable\">b</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">b</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">height</span> <span class=\"token operator\">&lt;</span> <span class=\"token hvariable\">building</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">height</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span> <span class=\"token hvariable\">buildings</span> <span class=\"token operator\">`append`</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">building</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">else</span> <span class=\"token hvariable\">buildings</span>\n    <span class=\"token constant\">Nothing</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">building</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">--                 🔳     💎</span>\n<span class=\"token hvariable\">recordSetters</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Array</span> <span class=\"token constant\">Building</span>\n<span class=\"token hvariable\">recordSetters</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">foldl</span>\n  <span class=\"token hvariable\">tallestBuildings</span> <span class=\"token comment\">-- 🧺</span>\n  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">-- 🔳💎</span>\n  <span class=\"token hvariable\">buildings</span> <span class=\"token comment\">-- 🔳</span></code></pre></div>\n<p>This example is similar to the preveious one. However, the container for our most wanted value is an array, which holds\nzero or any number of values, instead of zero or one like <code class=\"language-text\">Maybe</code>. Functions such as this one, where the best values are gathered into an unbounded container, are filters.</p>\n<p>While the types on their own wouldn’t tell us that all of these functions are searches / filters, the variable role annotations tell us that we’re always searching for a best value / values, so the implementations of <code class=\"language-text\">tallestBuildings</code>, <code class=\"language-text\">isItMedium</code>, and <code class=\"language-text\">compareBuildings</code> could be hidden and we’d still have a good sense of what these functions do.</p>\n<h3>The end</h3>\n<p>These three examples showed how the roles of variables framework, in conjunction with information represented in types,\ncan give you a lot of clues about how a function or program works without having to dig into the implementation. While some\nof the syntax might be strange if you’re not familiar with PureScript, I hope the annotated and emojified variable roles help make clear what’s going on.</p>\n<p>Also, if you’re also interested in turning the roles of variables annotations into a VSCode extension, please tweet at me\n<code class=\"language-text\">@james_santucci</code> — I don’t know anything about VSCode extensions at this point, but it sounds fun.</p>","frontmatter":{"title":"Variable roles, types, and code skimming","date":"April 22, 2021","description":"I've been reading *The Programmer's Brain*. One of the techniques for reading unfamiliar code is using the *roles of variables* framework. This post walks through combining information from roles and types to skim unfamiliar code written with folds faster."}},"previous":{"fields":{"slug":"/tiny-test-for-Non-production-Property-Testing-Games/tiny-test-for-Non-production-Property-Testing-Games/"},"frontmatter":{"title":"tiny-test, for non-production property testing games"}},"next":{"fields":{"slug":"/cliffs,-a-small-CLI-for-remembering-what-your-scripts-to-rule-them-all-are-for/cliffs,-a-small-CLI-for-remembering-what-your-scripts-to-rule-them-all-are-for/"},"frontmatter":{"title":"cliffs, a small CLI for remembering what your scripts to rule them all are for"}}},"pageContext":{"id":"54071118-b669-530a-a861-51cbd56162fe","previousPostId":"4bcbb62f-093c-51b0-8b75-7273fcbe9438","nextPostId":"044a9b46-a101-5f62-bec6-2ef78c2bd4c3"}},
    "staticQueryHashes": ["2841359383","3257411868"]}